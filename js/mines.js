// DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã Mines
const minesGrid = document.querySelector('.mines-grid');
const minesBetInput = document.getElementById('mines-bet');
const minesPlayBtn = document.getElementById('mines-play-btn');
const minesOptions = document.querySelectorAll('.mines-option');
const minesResult = document.getElementById('mines-result');
const minesWinAmount = document.getElementById('mines-win-amount');
const minesPlayAgainBtns = document.querySelectorAll('.btn-play-again');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let minesGameActive = false;
let minesBombCount = 3; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let minesSelectedTiles = [];
let minesBombPositions = [];
let minesCurrentBet = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã Mines
function initMinesGame() {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 5x5
    createMinesGrid();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    minesPlayBtn.addEventListener('click', startMinesGame);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–º–±
    minesOptions.forEach(option => {
        option.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –æ–ø—Ü–∏–π
            minesOptions.forEach(opt => opt.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
            option.classList.add('active');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±
            minesBombCount = parseInt(option.getAttribute('data-mines'));
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
    minesPlayAgainBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            minesResult.style.display = 'none';
            resetMinesGame();
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã Mines
function createMinesGrid() {
    minesGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º 25 —è—á–µ–µ–∫ (5x5)
    for (let i = 0; i < 25; i++) {
        const tile = document.createElement('div');
        tile.className = 'mines-tile';
        tile.setAttribute('data-index', i);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
        tile.addEventListener('click', () => handleMinesTileClick(i, tile));
        
        minesGrid.appendChild(tile);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã Mines
async function startMinesGame() {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É
    const betAmount = parseFloat(minesBetInput.value);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
    if (isNaN(betAmount) || betAmount <= 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
    if (betAmount > currentUser.balance) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.');
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        const response = await fetch(`${API_URL}/api/games/mines/play`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: currentUser.id,
                bet_amount: betAmount,
                bombs_count: minesBombCount,
                selected_tiles: []
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to place bet');
        }
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser.balance = data.new_balance;
        updateUserDisplay();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
        minesCurrentBet = betAmount;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä—É
        minesGameActive = true;
        minesSelectedTiles = [];
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã –∏ –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏
        minesPlayBtn.disabled = true;
        minesBetInput.disabled = true;
        minesOptions.forEach(option => option.disabled = true);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
        resetMinesGrid();
    } catch (error) {
        console.error('Error starting Mines game:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ –≤ –∏–≥—Ä–µ Mines
async function handleMinesTileClick(index, tile) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if (!minesGameActive || minesSelectedTiles.includes(index)) {
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    minesSelectedTiles.push(index);
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const response = await fetch(`${API_URL}/api/games/mines/play`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: currentUser.id,
                bet_amount: minesCurrentBet,
                bombs_count: minesBombCount,
                selected_tiles: minesSelectedTiles
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to process move');
        }
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser.balance = data.new_balance;
        updateUserDisplay();
        
        if (data.hit_bomb) {
            // –ò–≥—Ä–æ–∫ –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É
            minesBombPositions = data.bomb_positions;
            tile.classList.add('revealed', 'bomb');
            tile.innerHTML = 'üí£';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–æ–º–±—ã
            revealAllMines();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
            showMinesResult(false, 0);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            endMinesGame();
        } else {
            // –ò–≥—Ä–æ–∫ –Ω–∞—à–µ–ª –∞–ª–º–∞–∑
            tile.classList.add('revealed', 'diamond');
            tile.innerHTML = 'üíé';
            
            // –ï—Å–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
            if (minesSelectedTiles.length >= 25 - minesBombCount) {
                showMinesResult(true, data.win_amount);
                endMinesGame();
            }
        }
    } catch (error) {
        console.error('Error processing move:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã Mines
function showMinesResult(isWin, winAmount) {
    minesResult.style.display = 'block';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelector('.result-content.win').style.display = 'none';
    document.querySelector('.result-content.lose').style.display = 'none';
    
    if (isWin) {
        document.querySelector('.result-content.win').style.display = 'block';
        minesWinAmount.textContent = formatCurrency(winAmount);
    } else {
        document.querySelector('.result-content.lose').style.display = 'block';
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±–æ–º–±
function revealAllMines() {
    minesBombPositions.forEach(index => {
        const tile = document.querySelector(`.mines-tile[data-index="${index}"]`);
        if (!tile.classList.contains('revealed')) {
            tile.classList.add('revealed', 'bomb');
            tile.innerHTML = 'üí£';
        }
    });
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã Mines
function endMinesGame() {
    minesGameActive = false;
}

// –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏ Mines
function resetMinesGrid() {
    const tiles = document.querySelectorAll('.mines-tile');
    tiles.forEach(tile => {
        tile.classList.remove('revealed', 'diamond', 'bomb');
        tile.innerHTML = '';
    });
}

// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã Mines
function resetMinesGame() {
    minesGameActive = false;
    minesSelectedTiles = [];
    minesBombPositions = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
    resetMinesGrid();
    
    // –í–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    minesPlayBtn.disabled = false;
    minesBetInput.disabled = false;
    minesOptions.forEach(option => option.disabled = false);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initMinesGame); 
